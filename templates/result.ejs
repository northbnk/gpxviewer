<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>GPX Result</title>
</head>
<body>
  <h1>GPX Analysis</h1>
  <% if (stats.points) { %>
  <p>Total trackpoints: <%= stats.points %></p>
  <p>Total distance: <%= stats.distance_m.toFixed(1) %> meters</p>
  <h2>Bounds</h2>
  <ul>
    <li>Min Lat: <%= stats.bounds.min_lat %></li>
    <li>Max Lat: <%= stats.bounds.max_lat %></li>
    <li>Min Lon: <%= stats.bounds.min_lon %></li>
    <li>Max Lon: <%= stats.bounds.max_lon %></li>
  </ul>
  <h2>Track</h2>
  <div id="map" style="width:900px;height:450px;border:1px solid #ccc"></div>
  <h2>Elevation Profile</h2>
  <label for="yScale">Y-Axis Max:</label>
  <select id="yScale">
    <% for (let v = 1000; v <= 10000; v += 1000) { %>
      <option value="<%= v %>" <%= v === 5000 ? 'selected' : '' %>><%= v %>m</option>
    <% } %>
  </select>
  <canvas id="elevChart" width="900" height="450"></canvas>
  <h2>Elevation per KM</h2>
  <ul>
    <% (stats.per_km_elevation || []).forEach(function(seg) { %>
      <li>KM <%= seg.km %>: +<%= seg.gain.toFixed(1) %>m / -<%= seg.loss.toFixed(1) %>m</li>
    <% }); %>
  </ul>
  <script>
    const points = <%- JSON.stringify(stats.trackpoints || []) %>;
    const profile = <%- JSON.stringify(stats.profile || []) %>;
  </script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    let chart, map, marker;

    function updateHighlight(idx) {
      if (!points[idx]) return;
      if (marker) {
        marker.setPosition({ lat: points[idx][0], lng: points[idx][1] });
      }
      if (chart) {
        chart.setActiveElements([{ datasetIndex: 0, index: idx }]);
        chart.tooltip.setActiveElements([{ datasetIndex: 0, index: idx }]);
        chart.update();
      }
    }

    function nearestIndex(lat, lng) {
      let best = 0;
      let bestDist = Infinity;
      for (let i = 0; i < points.length; i++) {
        const dLat = points[i][0] - lat;
        const dLng = points[i][1] - lng;
        const d = dLat * dLat + dLng * dLng;
        if (d < bestDist) { bestDist = d; best = i; }
      }
      return best;
    }

    function createMap() {
      if (!points.length) return;
      const path = points.map(p => ({ lat: p[0], lng: p[1] }));
      map = new google.maps.Map(document.getElementById('map'), {
        zoom: 14,
        center: path[0]
      });
      const poly = new google.maps.Polyline({ path, map, strokeColor: 'blue' });
      marker = new google.maps.Marker({ map });
      map.addListener('mousemove', e => {
        const idx = nearestIndex(e.latLng.lat(), e.latLng.lng());
        updateHighlight(idx);
      });
      poly.addListener('mousemove', e => {
        const idx = nearestIndex(e.latLng.lat(), e.latLng.lng());
        updateHighlight(idx);
      });
    }

    function initChart() {
      if (profile.length < 2) return;
      const ctx = document.getElementById('elevChart').getContext('2d');
      const labels = profile.map(p => (p[0] / 1000).toFixed(2));
      const elev = profile.map(p => p[1]);
      const yMax = parseInt(document.getElementById('yScale').value, 10);
      chart = new Chart(ctx, {
        type: 'line',
        data: { labels, datasets: [{ label: 'Elevation (m)', data: elev, borderColor: 'blue', fill: false, pointRadius: 0 }] },
        options: {
          interaction: { mode: 'nearest', intersect: false },
          scales: { x: { title: { display: true, text: 'Distance (km)' } }, y: { title: { display: true, text: 'Elevation (m)' }, min: 0, max: yMax } },
          responsive: false,
          maintainAspectRatio: false
        }
      });
      document.getElementById('yScale').addEventListener('change', e => {
        const newMax = parseInt(e.target.value, 10);
        chart.options.scales.y.max = newMax;
        chart.update();
      });
      document.getElementById('elevChart').addEventListener('mousemove', evt => {
        const els = chart.getElementsAtEventForMode(evt, 'nearest', { intersect: false }, false);
        if (els.length) updateHighlight(els[0].index);
      });
    }

  window.initMap = function() {
    createMap();
    initChart();
  };
</script>
<% if (googleMapsApiKey) { %>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%= googleMapsApiKey %>&callback=initMap"></script>
<% } else { %>
<p style="color:red">Google Maps API key not set</p>
<script>
  document.addEventListener('DOMContentLoaded', initChart);
</script>
<% } %>
  <% } else { %>
  <p>No trackpoints found in GPX.</p>
  <% } %>
  <a href="/">Upload another file</a>
</body>
</html>
